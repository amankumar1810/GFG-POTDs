// Stock Buy and Sell â€“ Max 2 Transactions Allowed(Hard).

// Refer LC 123 (Hard).
class Solution {
  private:
    int solve(int index,int buy,vector<int> &prices,vector<vector<vector<int>>> &dp,int cap){
        int n = prices.size();
        if(index==n || cap==0)
            return 0;
        if(dp[index][buy][cap]!=-1)
            return dp[index][buy][cap];
        int profit = 0;
        if(buy==1)
            profit = max(-prices[index]+solve(index+1,0,prices,dp,cap),solve(index+1,1,prices,dp,cap));
        else
            profit = max(prices[index]+solve(index+1,1,prices,dp,cap-1),solve(index+1,0,prices,dp,cap));
        return dp[index][buy][cap] = profit;
    }
  public:
    int maxProfit(vector<int> &prices) {
        // code here
        int n = prices.size();
        vector<vector<vector<int>>> dp(n,vector<vector<int>> (2,vector<int> (3,-1)));
        return solve(0,1,prices,dp,2);
    }
};