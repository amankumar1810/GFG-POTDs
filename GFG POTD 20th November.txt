// Majority Element II (Medium).

// Isko O(1) Space mein banana hai.
// Majority element Leetcode ke jaise hi isme Moore Voting Algorithm use karenge.

class Solution {
  public:
    /*
        At most 2 majority element ho sakte hai.
        2 aise element nikaal lenge jinka freq. highest ho.
        
        Agar inka freq. n/3 se jyada ho to inko ans vector me daal lenge.
        
    */
    vector<int> findMajority(vector<int>& nums) {
        // Your code goes here.
        int n = nums.size();
        int candidate1,candidate2;
        int cnt1=0,cnt2=0;
        
        for(auto &i:nums){
            // Ek dum Majority Element wala concept use hua hai.
            if(cnt1==0 && i != candidate2){
                candidate1 = i;
                cnt1++;
            }
            else if(cnt2==0 && i != candidate1){
                candidate2 = i;
                cnt2++;
            }
            else if(i==candidate1)
                cnt1++;
            else if(i==candidate2)
                cnt2++;
            else{
                cnt1--;
                cnt2--;
            }
        }
        
        // Check karenge ki inn highest freq. wale element ki freq. n/3 se jyada hai kya.
        cnt1=0,cnt2=0;
        for(auto &i:nums){
            if(i==candidate1)
                cnt1++;
            else if(i==candidate2)
                cnt2++;
        }
        vector<int> ans;
        
        // hai to answer me daal denge.
        if(cnt1>n/3)
            ans.push_back(candidate1);
        if(cnt2>n/3)
            ans.push_back(candidate2);
            
        // Sorted form mein answer chahiye.
        sort(ans.begin(),ans.end());
        
        return ans;
    }
};

