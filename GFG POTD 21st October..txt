// Split the Array (Easy).

// High level logic hai isme.
/*
    XOR equal hone chahiye dono subsets ka.
    Ab dekhenge ki do set of answers aise mil rahe hai jo totally same hai ek doosre ke.
    [1,2,3] par dry run karke dekh lo.
    
    As total subsets = 2^n hoga.
    isi liye inka half 2^(n-1) answer hoga.
    But empty walon ko nahi lene hai.
    
    Isi liye final answer = 2^(n-1)-1;
    
    
    
    
    Do groups jinka xor equal laana hai humko unka aapas me xor pure array ka xor hoga.
    Equals ka xor = 0 hota hai.
    Isi liye pure array ka XOR=0 hona chahiye.
*/
class Solution {
  public:
    int countgroup(vector<int>& arr) {
        // Complete the function
        int n = arr.size();
        int mod = 1e9+7;
        
        int xorVal = 0;
        for(auto &i:arr)
            xorVal ^= i;
            
        if(xorVal != 0)
            return 0;
        
        int ans = 1;
        for(int i=0;i<n-1;i++){
            ans = (ans*2)%mod;  // overflow se deal kiye hai.
        }
        
        ans %= mod;
        return ans-1;
    }
};