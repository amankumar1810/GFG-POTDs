// 0 - 1 Knapsack Problem(Medium).

class Solution {
  public:
    //Function to return max value that can be put in knapsack of capacity W.
    int solve(int w,vector<int>& wt,vector<int>& val,vector<vector<int>> &dp,int n){
        if(n<0)     // base case
            return 0;
        
        // already calculated
        if(dp[n][w]!=-1)
            return dp[n][w];
            
        // not take scenario.
        if(wt[n]>w){
             return dp[n][w] = solve(w,wt,val,dp,n-1);
        }
        
        // take scenario. will take maximum of take and not take.
        else{
             return dp[n][w] = max(solve(w,wt,val,dp,n-1),solve(w-wt[n],wt,val,dp,n-1)+val[n]);
        }
    }
    int knapsack(int W, vector<int>& val, vector<int>& wt) {
        // Your code here
        int n = wt.size();
        vector<vector<int>> dp(n,vector<int>(W+1,-1));
        return solve(W,wt,val,dp,n-1);
    }
};