// Solve the Sudoku(Hard).

// Refer LC 37.
class Solution {
  private:
    bool solve(vector<vector<int>> &mat){
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(mat[i][j]==0){
                    for(int k=1;k<=9;k++){
                        if(isValid(mat,i,j,k)){
                            mat[i][j] = k;
                            if(solve(mat))
                                return true;
                            else
                                mat[i][j] = 0;
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    bool isValid(vector<vector<int>> &mat,int row, int col, int k){
        for(int i=0;i<9;i++){
            if(mat[row][i]==k)
                return false;
            if(mat[i][col]==k)
                return false;
            if(mat[3*(row/3)+(i/3)][3*(col/3)+(i%3)]==k)
                return false;
        }
        return true;
    }
  public:
    // Function to find a solved Sudoku.
    void solveSudoku(vector<vector<int>> &mat) {
        // code here
        solve(mat);
    }
};


// Refer LC 37.
class Solution {
  private:
    bool solve(vector<vector<int>> &mat){
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(mat[i][j]==0){
                    for(int k=1;k<=9;k++){
                        if(isValid(mat,i,j,k)){
                            mat[i][j] = k;
                            if(solve(mat))
                                return true;
                            else
                                mat[i][j] = 0;
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    
    bool isValid(vector<vector<int>> &mat,int row, int col, int k){
        for(int i=0;i<9;i++){
            if(mat[row][i]==k)
                return false;
            if(mat[i][col]==k)
                return false;
            if(mat[3*(row/3)+(i/3)][3*(col/3)+(i%3)]==k)
                return false;
        }
        return true;
    }
  public:
    // Function to find a solved Sudoku.
    void solveSudoku(vector<vector<int>> &mat) {
        // code here
        solve(mat);
    }
};