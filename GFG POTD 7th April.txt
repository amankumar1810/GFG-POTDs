// Directed Graph Cycle(Medium).

// Using DFS.

class Solution {
  private:
    bool solve(int idx,vector<int> &vis,vector<int> &pathVis,vector<vector<int>> &adj){
        vis[idx]=1;
        pathVis[idx]=1;
        for(int &i:adj[idx]){
            if(!vis[i]){
                if(solve(i,vis,pathVis,adj))
                    return true;
            }
            if(pathVis[i])
                return true;
        }
        pathVis[idx]=0;
        return false;
    }
  public:
    bool isCyclic(int V, vector<vector<int>> &edges) {
        // code here
        int E = edges.size();
        vector<vector<int>> adj(V);
        for(int i=0;i<E;i++){
            int u = edges[i][0];
            int v = edges[i][1];
            adj[u].push_back(v);
        }
        vector<int> vis(V,0);
        vector<int> pathVis(V,0);
        for(int i=0;i<V;i++){
            if(!vis[i]){
                if(solve(i,vis,pathVis,adj))
                    return true;
            }
        }
        return false;
    }
};

// Using BFS (Topological Sort).

class Solution {
  public:
    bool isCyclic(int V, vector<vector<int>> &edges) {
        // code here
        int E = edges.size();
        vector<vector<int>> adj(V);
        for(int i=0;i<E;i++){
            int u = edges[i][0];
            int v = edges[i][1];
            adj[u].push_back(v);
        }
        queue<int> q;
        vector<int> indegree(V,0);
        for(int i=0;i<V;i++){
            for(auto &it:adj[i]){
                indegree[it]++;
            }
        }
        for(int i=0;i<V;i++){
            if(indegree[i]==0)
                q.push(i);
        }
        while(!q.empty()){
            int curr = q.front();
            q.pop();
            for(auto &i:adj[curr]){
                indegree[i]--;
                if(indegree[i]==0)
                    q.push(i);
            }
        }
        for(int i=0;i<V;i++){
            if(indegree[i]!=0)
                return true;
        }
        return false;
    }
};

// Studied it very well.